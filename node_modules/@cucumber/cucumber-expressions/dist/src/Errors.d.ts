import ParameterType from './ParameterType';
import GeneratedExpression from './GeneratedExpression';
declare class CucumberExpressionError extends Error {
}
declare class AmbiguousParameterTypeError extends CucumberExpressionError {
    static forConstructor(keyName: string, keyValue: string, parameterTypes: ReadonlyArray<ParameterType<any>>, generatedExpressions: ReadonlyArray<GeneratedExpression>): AmbiguousParameterTypeError;
    static forRegExp(parameterTypeRegexp: string, expressionRegexp: RegExp, parameterTypes: ReadonlyArray<ParameterType<any>>, generatedExpressions: ReadonlyArray<GeneratedExpression>): AmbiguousParameterTypeError;
    static _parameterTypeNames(parameterTypes: ReadonlyArray<ParameterType<any>>): string;
    static _expressions(generatedExpressions: ReadonlyArray<GeneratedExpression>): string;
}
declare class UndefinedParameterTypeError extends CucumberExpressionError {
    readonly undefinedParameterTypeName: string;
    constructor(undefinedParameterTypeName: string);
}
export { AmbiguousParameterTypeError, UndefinedParameterTypeError, CucumberExpressionError, };
