"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = __importStar(require("lodash"));
const helpers_1 = require("./helpers");
const attachment_manager_1 = __importDefault(require("./attachment_manager"));
const step_runner_1 = __importDefault(require("./step_runner"));
const messages_1 = require("@cucumber/messages");
const time_1 = require("../time");
const value_checker_1 = require("../value_checker");
const { Status } = messages_1.messages.TestStepFinished.TestStepResult;
class PickleRunner {
    constructor({ eventBroadcaster, stopwatch, gherkinDocument, newId, pickle, retries = 0, skip, supportCodeLibrary, worldParameters, }) {
        this.attachmentManager = new attachment_manager_1.default(({ data, media }) => {
            if (value_checker_1.doesNotHaveValue(this.currentTestStepId)) {
                throw new Error('Cannot attach when a step/hook is not running. Ensure your step/hook waits for the attach to finish.');
            }
            this.eventBroadcaster.emit('envelope', messages_1.messages.Envelope.fromObject({
                attachment: {
                    body: data,
                    contentEncoding: media.encoding,
                    mediaType: media.contentType,
                    testCaseStartedId: this.currentTestCaseStartedId,
                    testStepId: this.currentTestStepId,
                },
            }));
        });
        this.eventBroadcaster = eventBroadcaster;
        this.stopwatch = stopwatch;
        this.gherkinDocument = gherkinDocument;
        this.maxAttempts = 1 + (skip ? 0 : retries);
        this.newId = newId;
        this.pickle = pickle;
        this.skip = skip;
        this.supportCodeLibrary = supportCodeLibrary;
        this.worldParameters = worldParameters;
        this.testCaseId = this.newId();
        this.testSteps = this.buildTestSteps();
        this.resetTestProgressData();
    }
    resetTestProgressData() {
        this.world = new this.supportCodeLibrary.World({
            attach: this.attachmentManager.create.bind(this.attachmentManager),
            log: this.attachmentManager.log.bind(this.attachmentManager),
            parameters: this.worldParameters,
        });
        this.result = messages_1.messages.TestStepFinished.TestStepResult.fromObject({
            duration: time_1.getZeroDuration(),
            status: this.skip ? Status.SKIPPED : Status.PASSED,
        });
    }
    buildTestSteps() {
        const testSteps = [];
        this.getBeforeHookDefinitions().forEach((hookDefinition) => {
            testSteps.push({
                id: this.newId(),
                hookDefinition,
                isHook: true,
                isBeforeHook: true,
            });
        });
        this.pickle.steps.forEach((pickleStep) => {
            const stepDefinitions = this.getStepDefinitions(pickleStep);
            testSteps.push({
                id: this.newId(),
                pickleStep,
                stepDefinitions,
                isHook: false,
            });
        });
        this.getAfterHookDefinitions().forEach((hookDefinition) => {
            testSteps.push({
                id: this.newId(),
                hookDefinition,
                isHook: true,
            });
        });
        return testSteps;
    }
    emitTestCase() {
        const testCase = {
            pickleId: this.pickle.id,
            id: this.testCaseId,
            testSteps: this.testSteps.map((testStep) => {
                if (testStep.isHook) {
                    return {
                        id: testStep.id,
                        hookId: testStep.hookDefinition.id,
                    };
                }
                else {
                    return {
                        id: testStep.id,
                        pickleStepId: testStep.pickleStep.id,
                        stepDefinitionIds: testStep.stepDefinitions.map((x) => x.id),
                        stepMatchArgumentsLists: testStep.stepDefinitions.map((x) => {
                            const result = x.expression.match(testStep.pickleStep.text);
                            return {
                                stepMatchArguments: result.map((arg) => {
                                    return {
                                        group: this.mapArgumentGroup(arg.group),
                                        parameterTypeName: arg.parameterType.name,
                                    };
                                }),
                            };
                        }),
                    };
                }
            }),
        };
        this.eventBroadcaster.emit('envelope', messages_1.messages.Envelope.fromObject({ testCase }));
    }
    mapArgumentGroup(group) {
        return {
            start: group.start,
            value: group.value,
            children: value_checker_1.doesHaveValue(group.children)
                ? group.children.map((child) => this.mapArgumentGroup(child))
                : undefined,
        };
    }
    getAfterHookDefinitions() {
        return lodash_1.clone(this.supportCodeLibrary.afterTestCaseHookDefinitions)
            .reverse()
            .filter((hookDefinition) => hookDefinition.appliesToTestCase(this.pickle));
    }
    getBeforeHookDefinitions() {
        return this.supportCodeLibrary.beforeTestCaseHookDefinitions.filter((hookDefinition) => hookDefinition.appliesToTestCase(this.pickle));
    }
    getStepDefinitions(pickleStep) {
        return this.supportCodeLibrary.stepDefinitions.filter((stepDefinition) => stepDefinition.matchesStepName(pickleStep.text));
    }
    async invokeStep(step, stepDefinition, hookParameter) {
        return await step_runner_1.default.run({
            defaultTimeout: this.supportCodeLibrary.defaultTimeout,
            hookParameter,
            step,
            stepDefinition,
            world: this.world,
        });
    }
    isSkippingSteps() {
        return this.result.status !== Status.PASSED;
    }
    shouldSkipHook(isBeforeHook) {
        return this.skip || (this.isSkippingSteps() && isBeforeHook);
    }
    shouldUpdateStatus(testStepResult) {
        switch (testStepResult.status) {
            case Status.UNDEFINED:
            case Status.FAILED:
            case Status.AMBIGUOUS:
                return !lodash_1.default.some([Status.FAILED, Status.AMBIGUOUS, Status.UNDEFINED], this.result.status);
            default:
                return this.result.status === Status.PASSED;
        }
    }
    async aroundTestStep(testStepId, attempt, runStepFn) {
        this.eventBroadcaster.emit('envelope', messages_1.messages.Envelope.fromObject({
            testStepStarted: {
                testCaseStartedId: this.currentTestCaseStartedId,
                testStepId,
                timestamp: this.stopwatch.timestamp(),
            },
        }));
        this.currentTestStepId = testStepId;
        const testStepResult = await runStepFn();
        this.currentTestStepId = null;
        this.result.duration = time_1.addDurations(this.result.duration, testStepResult.duration);
        if (this.shouldUpdateStatus(testStepResult)) {
            this.result.status = testStepResult.status;
        }
        if (this.result.status === Status.FAILED &&
            attempt + 1 < this.maxAttempts) {
            /*
            TODO dont rely on `testStepResult.willBeRetried`, it will be moved or removed
            see https://github.com/cucumber/cucumber/issues/902
             */
            testStepResult.willBeRetried = true;
            this.result.willBeRetried = true;
        }
        if (testStepResult.message !== '') {
            this.result.message = testStepResult.message;
        }
        this.eventBroadcaster.emit('envelope', messages_1.messages.Envelope.fromObject({
            testStepFinished: {
                testCaseStartedId: this.currentTestCaseStartedId,
                testStepId,
                testStepResult,
                timestamp: this.stopwatch.timestamp(),
            },
        }));
    }
    async run() {
        this.emitTestCase();
        for (let attempt = 0; attempt < this.maxAttempts; attempt++) {
            this.currentTestCaseStartedId = this.newId();
            this.eventBroadcaster.emit('envelope', messages_1.messages.Envelope.fromObject({
                testCaseStarted: {
                    attempt,
                    testCaseId: this.testCaseId,
                    id: this.currentTestCaseStartedId,
                    timestamp: this.stopwatch.timestamp(),
                },
            }));
            for (const testStep of this.testSteps) {
                await this.aroundTestStep(testStep.id, attempt, async () => {
                    if (testStep.isHook) {
                        const hookParameter = {
                            gherkinDocument: this.gherkinDocument,
                            pickle: this.pickle,
                            testCaseStartedId: this.currentTestCaseStartedId,
                        };
                        if (!testStep.isBeforeHook) {
                            hookParameter.result = this.result;
                        }
                        return await this.runHook(testStep.hookDefinition, hookParameter, testStep.isBeforeHook);
                    }
                    else {
                        return await this.runStep(testStep);
                    }
                });
            }
            this.eventBroadcaster.emit('envelope', messages_1.messages.Envelope.fromObject({
                testCaseFinished: {
                    testCaseStartedId: this.currentTestCaseStartedId,
                    timestamp: this.stopwatch.timestamp(),
                },
            }));
            if (!this.result.willBeRetried) {
                break;
            }
            this.resetTestProgressData();
        }
        return this.result;
    }
    async runHook(hookDefinition, hookParameter, isBeforeHook) {
        if (this.shouldSkipHook(isBeforeHook)) {
            return messages_1.messages.TestStepFinished.TestStepResult.fromObject({
                status: Status.SKIPPED,
            });
        }
        return await this.invokeStep(null, hookDefinition, hookParameter);
    }
    async runStep(testStep) {
        if (testStep.stepDefinitions.length === 0) {
            return messages_1.messages.TestStepFinished.TestStepResult.fromObject({
                status: Status.UNDEFINED,
                duration: {
                    seconds: '0',
                    nanos: 0,
                },
            });
        }
        else if (testStep.stepDefinitions.length > 1) {
            return messages_1.messages.TestStepFinished.TestStepResult.fromObject({
                message: helpers_1.getAmbiguousStepException(testStep.stepDefinitions),
                status: Status.AMBIGUOUS,
                duration: {
                    seconds: '0',
                    nanos: 0,
                },
            });
        }
        else if (this.isSkippingSteps()) {
            return messages_1.messages.TestStepFinished.TestStepResult.fromObject({
                status: Status.SKIPPED,
                duration: {
                    seconds: '0',
                    nanos: 0,
                },
            });
        }
        return await this.invokeStep(testStep.pickleStep, testStep.stepDefinitions[0]);
    }
}
exports.default = PickleRunner;
//# sourceMappingURL=pickle_runner.js.map